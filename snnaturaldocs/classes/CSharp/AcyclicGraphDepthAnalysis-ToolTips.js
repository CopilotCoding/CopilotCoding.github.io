NDContentPage.OnToolTipsLoaded({698:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype698\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">GraphDepthInfo</div></div></div><div class=\"TTSummary\">Conveys summary information from a network depth analysis.</div></div>",731:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype731\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> GraphDepthInfo CalculateNodeDepths(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">DirectedGraph&nbsp;</td><td class=\"PName last\">digraph</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Calculate node depths in an acyclic directed graph.</div></div>",736:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype736\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">readonly</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\"><span class=\"Qualifier\">AcyclicGraphDepthAnalysis.</span>&#8203;StackFrame</div></div></div></div>",807:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype807\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\">DirectedGraph</div></div></div><div class=\"TTSummary\">Represents a directed graph.</div></div>",877:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype877\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">CyclicGraphCheck</div></div></div><div class=\"TTSummary\">An algorithm for checking/testing whether a given graph is cyclic or acyclic, i.e. does a given graph have a connectivity cycle.&nbsp; Method.&nbsp; ======= 1) We loop over all nodes in the network and perform a depth-first traversal from each node.&nbsp; (Note. the order that the nodes are traversed does not affect the correctness of the method)&nbsp; 2) Each traversal keeps track of its ancestor nodes (the path to the current node) at each step in the traversal. Thus if the traversal encounters an ancestor node then a cycle has been detected.&nbsp; 3) A set of visited nodes is maintained. This persists between traversals and allows each traversal to avoid traversing into nodes that have already been traversed.&nbsp; Note. We must traverse from each node rather than just e.g. the input nodes, because the network may have connectivity dead ends or even isolated connectivity that therefore would not be traversed into by following connectivity from the input nodes only, hence we perform a traversal from each node and attempt to maintain algorithmic efficiency by avoiding traversal into nodes that have already been traversed into.&nbsp; The graph traversal algorithm uses function recursion. A number of other classes in SharpNEAT perform graph traversal by using a separate traversal stack (stored on the heap); that approach is faster but more complex, thus this class has not been converted to the faster approach because it is not directly used in the evolutionary algorithm. At time of writing this class is used only in Debug.Assert statements and unit tests, thus the simpler implementation is more appropriate.</div></div>",1561:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1561\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">CyclicConnectionCheck</div></div></div><div class=\"TTSummary\">For checking/testing if a proposed new connection on a NEAT genome would form a connectivity cycle.</div></div>"});