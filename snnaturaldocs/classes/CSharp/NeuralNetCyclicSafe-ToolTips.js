NDContentPage.OnToolTipsLoaded({744:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype744\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\">WeightedDirectedGraph&#8203;<span class=\"TemplateSignature\">&lt;T&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> T : <span class=\"SHKeyword\">struct</span></div></div></div><div class=\"TTSummary\">Overview -------- Represents a weighted directed graph. The graph is described by an array of connections, each with a source and target node ID and a weight.&nbsp; The node IDs are actually node indexes, i.e. if there are N unique IDs referred to in the connection array then the indexes run from 0 to N-1. An exception to this is when representing graphs from a NeatGenome in which input and outputs nodes are given fixed IDs regardless of whether they are connected to or not, however the use of a contiguous range of node indexes starting at zero still holds in that case.&nbsp; Elsewhere in sharpneat (e.g. in a NeatGenome) graph node IDs are not necessarily contiguous, and thus any such graph representation must have its non-contiguous node IDs mapped to zero based node indexes to be represented by this class. Such node ID mapping is outside the scope of this class.&nbsp; This class can represent both cyclic or acyclic graphs, however, SharpNEAT uses it in the conversion of cyclic NeatGenomes only; a specialized class is used for acyclic graphs that gives improved runtime performance for acyclic networks.&nbsp; Specifics --------- The connection array is sorted by sourceID and secondary sorted by targetID. This means that all connections from a given node are located in a contiguous segment, the start of which can be efficiently located using a binary search. However to improve efficiency further an array of lookup indexes is compiled which gives the starting index of a connection span/segment for a given source node index.</div></div>",807:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype807\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\">DirectedGraph</div></div></div><div class=\"TTSummary\">Represents a directed graph.</div></div>",890:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype890\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public readonly</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">ConnectionIds</div></div></div><div class=\"TTSummary\">Represents the connections in a directed graph.</div></div>",2226:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2226\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">NeuralNetCyclic</div></div></div><div class=\"TTSummary\">A neural network class that represents a network with recurrent (cyclic) connections.&nbsp; Algorithm Overview.&nbsp; 1) Loop connections.&nbsp; Each connection gets its input signal from its source node, multiplies the signal by its weight, and adds the result to its target node\'s pre-activation variable. Connections are ordered by source node index, thus all memory reads are sequential, but the memory writes to node pre-activation variables are non-sequential.&nbsp; 2) Loop nodes.&nbsp; Pass each node\'s pre-activation signal through the activation function, storing the result in a separate post-activation signals array.&nbsp; 3) Completion.&nbsp; Copy the post-activation signals into the pre-activations signals array.&nbsp; The activation loop is run a fixed number of times/cycles to allow signals to gradually propagate through the network, one timestep/cycle/loop at a time.</div></div>",2342:"<div class=\"NDToolTip TDelegate LCSharp\"><div id=\"NDPrototype2342\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public delegate void</span> VecFn2&lt;T&gt;(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">T&nbsp;</td><td class=\"PName last\">vref,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">T&nbsp;</td><td class=\"PName last\">wref,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">len</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">where</span> T : <span class=\"SHKeyword\">struct</span></div></div><div class=\"TTSummary\">The activation function; unsafe memory span implementation with a separate input and output spans.</div></div>",2367:"<div class=\"NDToolTip TInterface LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2367\"><div class=\"CPEntry TInterface Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">interface</span></div><div class=\"CPName\">IBlackBox&#8203;<span class=\"TemplateSignature\">&lt;T&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> T : <span class=\"SHKeyword\">struct</span></div></div></div><div class=\"TTSummary\">Represents an abstract \'black box\' function, with an input vector, and an Activate() method that takes the inputs to produce an output vector. I.e. \'black box\' here could also be described as a multivariate mathematical function.&nbsp; Typically a black box will be a neural network, whereby we set the input vector, activate the network, and read its output vector. However, in principle a black box could be any kind of function or information processing system such as a C# program or a genetic programming tree.</div></div>"});