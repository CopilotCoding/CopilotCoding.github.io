NDContentPage.OnToolTipsLoaded({402:"<div class=\"NDToolTip TInterface LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype402\"><div class=\"CPEntry TInterface Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">interface</span></div><div class=\"CPName\">IGenomeDecoder&#8203;<span class=\"TemplateSignature\">&lt;TGenome,TPhenome&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> TPhenome : IDisposable</div></div></div><div class=\"TTSummary\">Represents types that decode genomes into phenomes.</div></div>",1322:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype1322\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\">NeatGenome&#8203;<span class=\"TemplateSignature\">&lt;T&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> T : <span class=\"SHKeyword\">struct</span></div></div></div><div class=\"TTSummary\">Represents a NEAT genome, i.e the genetic representation of a neural network.</div></div>",2226:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2226\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">NeuralNetCyclic</div></div></div><div class=\"TTSummary\">A neural network class that represents a network with recurrent (cyclic) connections.&nbsp; Algorithm Overview.&nbsp; 1) Loop connections.&nbsp; Each connection gets its input signal from its source node, multiplies the signal by its weight, and adds the result to its target node\'s pre-activation variable. Connections are ordered by source node index, thus all memory reads are sequential, but the memory writes to node pre-activation variables are non-sequential.&nbsp; 2) Loop nodes.&nbsp; Pass each node\'s pre-activation signal through the activation function, storing the result in a separate post-activation signals array.&nbsp; 3) Completion.&nbsp; Copy the post-activation signals into the pre-activations signals array.&nbsp; The activation loop is run a fixed number of times/cycles to allow signals to gradually propagate through the network, one timestep/cycle/loop at a time.</div></div>",2367:"<div class=\"NDToolTip TInterface LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2367\"><div class=\"CPEntry TInterface Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span> <span class=\"SHKeyword\">interface</span></div><div class=\"CPName\">IBlackBox&#8203;<span class=\"TemplateSignature\">&lt;T&gt;</span></div><div class=\"CPPostPrototypeLine\"><span class=\"SHKeyword\">where</span> T : <span class=\"SHKeyword\">struct</span></div></div></div><div class=\"TTSummary\">Represents an abstract \'black box\' function, with an input vector, and an Activate() method that takes the inputs to produce an output vector. I.e. \'black box\' here could also be described as a multivariate mathematical function.&nbsp; Typically a black box will be a neural network, whereby we set the input vector, activate the network, and read its output vector. However, in principle a black box could be any kind of function or information processing system such as a C# program or a genetic programming tree.</div></div>"});