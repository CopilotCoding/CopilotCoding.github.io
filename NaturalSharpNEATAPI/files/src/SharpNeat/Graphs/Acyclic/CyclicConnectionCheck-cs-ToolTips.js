NDContentPage.OnToolTipsLoaded({723:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype723\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">AcyclicGraphDepthAnalysis</div></div></div><div class=\"TTSummary\">An algorithm for calculating the depth of each node in an acyclic graph.&nbsp; Input nodes are defined as being at depth 0, the depth of all other nodes is defined as the maximum number of hops to each node from an input node. I.e. where multiple paths exist to a node (potentially each with a different numbers of hops), the node\'s depth is defined by the path with the most number of hops.</div></div>",807:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype807\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\">DirectedGraph</div></div></div><div class=\"TTSummary\">Represents a directed graph.</div></div>",828:"<div class=\"NDToolTip TStruct LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype828\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public readonly</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">DirectedConnection</div></div></div><div class=\"TTSummary\">Represents a connection between two nodes. Used primarily as a key into a Dictionary that uniquely identifies connections by their end points.</div></div>",877:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype877\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">CyclicGraphCheck</div></div></div><div class=\"TTSummary\">An algorithm for checking/testing whether a given graph is cyclic or acyclic, i.e. does a given graph have a connectivity cycle.&nbsp; Method.&nbsp; ======= 1) We loop over all nodes in the network and perform a depth-first traversal from each node.&nbsp; (Note. the order that the nodes are traversed does not affect the correctness of the method)&nbsp; 2) Each traversal keeps track of its ancestor nodes (the path to the current node) at each step in the traversal. Thus if the traversal encounters an ancestor node then a cycle has been detected.&nbsp; 3) A set of visited nodes is maintained. This persists between traversals and allows each traversal to avoid traversing into nodes that have already been traversed.&nbsp; Note. We must traverse from each node rather than just e.g. the input nodes, because the network may have connectivity dead ends or even isolated connectivity that therefore would not be traversed into by following connectivity from the input nodes only, hence we perform a traversal from each node and attempt to maintain algorithmic efficiency by avoiding traversal into nodes that have already been traversed into.&nbsp; The graph traversal algorithm uses function recursion. A number of other classes in SharpNEAT perform graph traversal by using a separate traversal stack (stored on the heap); that approach is faster but more complex, thus this class has not been converted to the faster approach because it is not directly used in the evolutionary algorithm. At time of writing this class is used only in Debug.Assert statements and unit tests, thus the simpler implementation is more appropriate.</div></div>"});