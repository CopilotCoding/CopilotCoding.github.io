NDContentPage.OnToolTipsLoaded({186:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype186\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">internal sealed</span></div><div class=\"CPName\">MockPreyCaptureAgent</div></div></div></div>",2226:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2226\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">NeuralNetCyclic</div></div></div><div class=\"TTSummary\">A neural network class that represents a network with recurrent (cyclic) connections.&nbsp; Algorithm Overview.&nbsp; 1) Loop connections.&nbsp; Each connection gets its input signal from its source node, multiplies the signal by its weight, and adds the result to its target node\'s pre-activation variable. Connections are ordered by source node index, thus all memory reads are sequential, but the memory writes to node pre-activation variables are non-sequential.&nbsp; 2) Loop nodes.&nbsp; Pass each node\'s pre-activation signal through the activation function, storing the result in a separate post-activation signals array.&nbsp; 3) Completion.&nbsp; Copy the post-activation signals into the pre-activations signals array.&nbsp; The activation loop is run a fixed number of times/cycles to allow signals to gradually propagate through the network, one timestep/cycle/loop at a time.</div></div>",2199:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2199\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">NeuralNetAcyclic</div></div></div><div class=\"TTSummary\">A version of Double.NeuralNetAcyclic that utilises some vectorized operations for improved performance on hardware platforms that support them.</div></div>",2251:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2251\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">NeuralNetCyclicSafe</div></div></div><div class=\"TTSummary\">This class is functionally equivalent to NeuralNetCyclic, but doesn\'t use any of the unsafe memory pointer techniques used in that class, and therefore this class is much slower.&nbsp; This class is intended to be used as a safe reference implementation that can be used when testing or debugging NeuralNetCyclic.</div></div>",2304:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype2304\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\">NeuralNetAcyclicSafe</div></div></div><div class=\"TTSummary\">This class is functionally equivalent to NeuralNetAcyclic, but doesn\'t use any of the unsafe memory pointer techniques used in that class, and therefore this class is much slower.&nbsp; This class is intended to be used as a safe reference implementation that can be used when testing or debugging NeuralNetAcyclic.</div></div>"});